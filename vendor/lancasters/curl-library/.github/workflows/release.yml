name: Release

on:
  workflow_call:
jobs:
  create:
    runs-on: ubuntu-latest
    outputs:
      VERSION: ${{ steps.versionNumber.outputs.VERSION }}
    steps:
      - uses: actions/checkout@v1
      - uses: 8BitJonny/gh-get-current-pr@3.0.0
        id: PR
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          sha: ${{ github.event.pull_request.head.sha }}
          filterOutClosed: false
          filterOutDraft: true
      - run: echo "PR ${{ steps.PR.outputs.number }} ${{ steps.PR.outputs.pr_title }}"
        if: success() && steps.PR.outputs.number && steps.PR.outputs.pr_found == 'true'
        env:
          prNumber: ${{ steps.PR.outputs.number }}
          prJSON: ${{ steps.PR.outputs.pr }}
          prUrl: ${{ steps.PR.outputs.pr_url }}
          prTitle: ${{ steps.PR.outputs.pr_title }}
          prBody: ${{ steps.PR.outputs.pr_body }}
          prCreatedAt: ${{ steps.PR.outputs.pr_created_at }}
          prMergedAt: ${{ steps.PR.outputs.pr_merged_at }}
          prClosedAt: ${{ steps.PR.outputs.pr_closed_at }}
          prLabel: ${{ steps.PR.outputs.pr_labels }}
      - name: Get last release version
        if: success() && steps.PR.outputs.number && steps.PR.outputs.pr_found == 'true'
        id: versionNumber
        run: |
          VERSION=$(curl -L \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          https://api.github.com/repos/${{ github.repository }}/releases/latest | jq -r '.tag_name')
          echo "$VERSION"
          regexVersion="v([0-9]+).([0-9]+).?([0-9]+)?"
          if [[ $VERSION =~ $regexVersion ]]; then
            major="${BASH_REMATCH[1]}"
            minor="${BASH_REMATCH[2]}"
            build="${BASH_REMATCH[3]}"
          fi
          if [ -n "$build" ]; then
            build=$((build+1))
            NEWVERSION="v$major.$minor.$build"
          else
            minor=$((minor + 1))            
            NEWVERSION="v$major.$minor"
          fi
          echo "$NEWVERSION"
          echo "VERSION=$NEWVERSION" >> $GITHUB_ENV
          echo "VERSION=$NEWVERSION" >> $GITHUB_OUTPUT
      - name: Create Release ${{ env.VERSION }}
        if: success() && steps.PR.outputs.number && steps.PR.outputs.pr_found == 'true'
        run: |
          if [ -z "${{ env.VERSION }}" ]; then
            echo "Failed to find version"
            exit 1
          fi
          body="${{ fromJSON(steps.PR.outputs.pr).head.ref }}"
          branchRegex="^([a-zA-Z]+)-([0-9]+)$"
          if [[ "${{ fromJSON(steps.PR.outputs.pr).head.ref }}" =~ $branchRegex ]]; then
              body="[${{ fromJSON(steps.PR.outputs.pr).head.ref }}](https://lrgi.atlassian.net/browse/${{ fromJSON(steps.PR.outputs.pr).head.ref }})"
          fi
          response=$(curl --write-out '%{http_code}' -L -X POST \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          https://api.github.com/repos/${{ github.repository }}/releases \
          -d '{"tag_name":"${{ env.VERSION }}","name":"${{ env.VERSION }}","body":"'$body'","draft":false,"prerelease":false,"generate_release_notes":false}')
          code=$(tail -n1 <<< "$response")  
          content=$(sed '$ d' <<< "$response")
          echo "$content"
          if [[ "$code" -ne 201 ]]; then
            echo "Failed to create new release" 
            exit 1;
          else
            echo "::echo Released Version: ${{ env.VERSION }}"
          fi
